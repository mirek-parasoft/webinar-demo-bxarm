<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="2021-01-26" climode="true" execEnv="linux_x86_64" hasViols="true" id="1611541592967" lang="en_US" machine="409c891787e0" prjModule="build, ..." project="" tag="${scontrol_branch}-linux_x86_64" time="2021-01-26T12:27:14+01:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2021.1.0" user="ciuser">
   <TestConfig machine="409c891787e0" name="MISRA C 2012" pseudoUrl="/workspaces/webinar-demo-bxarm/cpptest.local.MISRA C2012.properties" user="ciuser" />
   <Authors>
      <Author id="dev1" name="ciuser" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.5.1.20201230" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.5.1.20210115B1072" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.5.1.20210115B1072" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.5.1.20201204B2396" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.5.1.20210115B1072" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="ciuser" hash="-1411136315" locRef="1" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="arrayOutOfBounds.c" totLns="44" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/arrayOutOfBounds.c" />
         <Loc auth="ciuser" hash="1217957913" locRef="2" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="bufferOverflow.c" totLns="35" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/bufferOverflow.c" />
         <Loc auth="ciuser" hash="-892903586" locRef="3" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="dbutil.c" totLns="17" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/dbutil.c" />
         <Loc auth="ciuser" hash="1923244810" locRef="4" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="divisionByZero.c" totLns="58" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/divisionByZero.c" />
         <Loc auth="ciuser" hash="-985481290" locRef="5" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="fileLeaks.c" totLns="61" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/fileLeaks.c" />
         <Loc auth="ciuser" hash="-480973676" locRef="6" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="integerOverflow.c" totLns="42" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/integerOverflow.c" />
         <Loc auth="ciuser" hash="1502549011" locRef="7" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="memoryLeaks.c" totLns="46" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/memoryLeaks.c" />
         <Loc auth="ciuser" hash="585379582" locRef="8" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="nullPointerDeref.c" totLns="43" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/nullPointerDeref.c" />
         <Loc auth="ciuser" hash="-1583021683" locRef="9" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="nullPointerDerefBenchmark.c" totLns="79" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/nullPointerDerefBenchmark.c" />
         <Loc auth="ciuser" hash="1115766966" locRef="10" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="sql.c" totLns="12" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/sql.c" />
         <Loc auth="ciuser" hash="-1138451494" locRef="11" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="sqlInjection.c" totLns="37" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/sqlInjection.c" />
         <Loc auth="ciuser" hash="1398926183" locRef="12" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="unreachableCode.c" totLns="68" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/unreachableCode.c" />
         <Loc auth="ciuser" hash="-786036091" locRef="13" projId="build" projPath="/build" project="build" resProjPath="../../../../../../../app/main.c" totLns="177" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/app/main.c" />
         <Loc auth="ciuser" hash="-2093056121" locRef="14" projId="build" projPath="/build" project="build" resProjPath="../../../../../../../app/stm32f4xx_it.c" totLns="149" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/app/stm32f4xx_it.c" />
         <Loc auth="ciuser" hash="-390129458" locRef="15" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="dbutil.h" totLns="10" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/dbutil.h" />
         <Loc auth="ciuser" hash="-829573575" locRef="16" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="socket.h" totLns="22" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/socket.h" />
         <Loc auth="ciuser" hash="380717242" locRef="17" projId="lib-logic" projPath="/lib-logic" project="lib-logic" resProjPath="sql.h" totLns="28" uri="file://409c891787e0/workspaces/webinar-demo-bxarm/lib-logic/sql.h" />
      </Locations>
   </Scope>
   
  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:04">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="2" checkedLns="326" id="build" name="build" qfixErrs="0" suppErrs="0" totErrs="18" totFiles="2" totLns="326" />
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="15" checkedLns="602" id="lib-logic" name="lib-logic" qfixErrs="0" suppErrs="0" totErrs="73" totFiles="15" totLns="602" />
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012" name="MISRAC2012" rules="349" total="0">
               <Category authTot="36;" authUrg="28;" desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" rules="2" total="36" />
               <Category authTot="7;" authUrg="2;" desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" rules="1" total="7" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" rules="1" total="0" />
               <Category authTot="27;" authUrg="18;" desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" rules="1" total="27" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" rules="1" total="0" />
               <Category authTot="21;" authUrg="2;" desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" rules="7" total="21" />
            </Category>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="2;" cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" origId="CODSTA-161_a" sev="2" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" origId="CODSTA-161_d" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" origId="CODSTA-161_e" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" origId="CODSTA-161_f" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="2;" cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" origId="MISRA2004-13_2" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="27;" authUrg="18;" cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" origId="MISRA2004-14_7" sev="4" total="27" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="36;" authUrg="28;" cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" origId="CODSTA-118" sev="2" total="36" />
         </RulesList>
         <SeverityList>
            <Severity authTot="64;" authUrg="32;" id="2" total="64" />
            <Severity authTot="27;" authUrg="18;" id="4" total="27" />
         </SeverityList>
      </Rules>
      
  <Supps />

      
  <StdViols>
    <StdViol msg="Declaration of object 'cache' does not precede its definition" ln="7" locFile="/lib-logic/arrayOutOfBounds.c" locStartln="7" sev="2" auth="ciuser" locRef="1" rule="MISRAC2012-RULE_8_4-a" lnHash="-1730052864" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1730052864" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="-1411136315" locEndLn="7" goals="1," />
    <StdViol msg="Prototype of function 'clip' does not precede function definition" ln="9" locFile="/lib-logic/arrayOutOfBounds.c" locStartln="9" sev="2" auth="ciuser" locRef="1" rule="MISRAC2012-RULE_8_4-a" lnHash="1380433239" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1380433239" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-1411136315" locEndLn="9" goals="1," />
    <StdViol msg="Prototype of function 'selectPerson' does not precede function definition" ln="14" locFile="/lib-logic/arrayOutOfBounds.c" locStartln="14" sev="2" auth="ciuser" locRef="1" rule="MISRAC2012-RULE_8_4-a" lnHash="8759389" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="8759389" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="-1411136315" locEndLn="14" goals="1," />
    <StdViol msg="Prototype of function 'clearCache' does not precede function definition" ln="29" locFile="/lib-logic/arrayOutOfBounds.c" locStartln="29" sev="2" auth="ciuser" locRef="1" rule="MISRAC2012-RULE_8_4-a" lnHash="982887335" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="982887335" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="-1411136315" locEndLn="29" goals="1," />
    <StdViol msg="Prototype of function 'clearAllCache' does not precede function definition" ln="40" locFile="/lib-logic/arrayOutOfBounds.c" locStartln="40" sev="2" auth="ciuser" locRef="1" rule="MISRAC2012-RULE_8_4-a" lnHash="-1961341245" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1961341245" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="-1411136315" locEndLn="40" goals="1," />
    <StdViol msg="Declaration of object 'buffer' does not precede its definition" ln="7" locFile="/lib-logic/bufferOverflow.c" locStartln="7" sev="2" auth="ciuser" locRef="2" rule="MISRAC2012-RULE_8_4-a" lnHash="-2118839699" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-2118839699" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1217957913" locEndLn="7" goals="1," />
    <StdViol msg="Prototype of function 'fillBuffer' does not precede function definition" ln="9" locFile="/lib-logic/bufferOverflow.c" locStartln="9" sev="2" auth="ciuser" locRef="2" rule="MISRAC2012-RULE_8_4-a" lnHash="1243569904" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1243569904" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1217957913" locEndLn="9" goals="1," />
    <StdViol msg="Prototype of function 'resetBuffer' does not precede function definition" ln="24" locFile="/lib-logic/bufferOverflow.c" locStartln="24" sev="2" auth="ciuser" locRef="2" rule="MISRAC2012-RULE_8_4-a" lnHash="990130130" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="990130130" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1217957913" locEndLn="24" goals="1," />
    <StdViol msg="Prototype of function 'resetAll' does not precede function definition" ln="30" locFile="/lib-logic/bufferOverflow.c" locStartln="30" sev="2" auth="ciuser" locRef="2" rule="MISRAC2012-RULE_8_4-a" lnHash="1718585439" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1718585439" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1217957913" locEndLn="30" goals="1," />
    <StdViol msg="Provide only one exit point in 'retrievePersonFromDB' function" ln="10" locFile="/lib-logic/dbutil.c" locStartln="10" sev="4" auth="ciuser" locRef="3" rule="MISRAC2012-RULE_15_5-a" lnHash="-1561874268" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1561874268" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="-892903586" locEndLn="10" goals="1," />
    <StdViol msg="Provide only one exit point in 'retrievePersonFromDB' function" ln="13" locFile="/lib-logic/dbutil.c" locStartln="13" sev="4" auth="ciuser" locRef="3" rule="MISRAC2012-RULE_15_5-a" lnHash="-413015691" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-413015691" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="17" locType="sr" urgent="true" hash="-892903586" locEndLn="13" goals="1," />
    <StdViol msg="Provide only one exit point in 'retrievePersonFromDB' function" ln="15" locFile="/lib-logic/dbutil.c" locStartln="15" sev="4" auth="ciuser" locRef="3" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256394053" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256394053" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-892903586" locEndLn="15" goals="1," />
    <StdViol msg="Prototype of function 'displayPersonalInfo' does not precede function definition" ln="5" locFile="/lib-logic/divisionByZero.c" locStartln="5" sev="2" auth="ciuser" locRef="4" rule="MISRAC2012-RULE_8_4-a" lnHash="-1399767151" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1399767151" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1923244810" locEndLn="5" goals="1," />
    <StdViol msg="Prototype of function 'createNewPerson' does not precede function definition" ln="12" locFile="/lib-logic/divisionByZero.c" locStartln="12" sev="2" auth="ciuser" locRef="4" rule="MISRAC2012-RULE_8_4-a" lnHash="1618739657" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1618739657" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="1923244810" locEndLn="12" goals="1," />
    <StdViol msg="Provide only one exit point in 'createNewPerson' function" ln="15" locFile="/lib-logic/divisionByZero.c" locStartln="15" sev="4" auth="ciuser" locRef="4" rule="MISRAC2012-RULE_15_5-a" lnHash="-413015691" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-413015691" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="17" locType="sr" urgent="true" hash="1923244810" locEndLn="15" goals="1," />
    <StdViol msg="Provide only one exit point in 'createNewPerson' function" ln="20" locFile="/lib-logic/divisionByZero.c" locStartln="20" sev="4" auth="ciuser" locRef="4" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256394053" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256394053" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1923244810" locEndLn="20" goals="1," />
    <StdViol msg="Prototype of function 'calculateAverageSalary' does not precede function definition" ln="23" locFile="/lib-logic/divisionByZero.c" locStartln="23" sev="2" auth="ciuser" locRef="4" rule="MISRAC2012-RULE_8_4-a" lnHash="1420344907" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1420344907" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1923244810" locEndLn="23" goals="1," />
    <StdViol msg="Prototype of function 'processStaff' does not precede function definition" ln="29" locFile="/lib-logic/divisionByZero.c" locStartln="29" sev="2" auth="ciuser" locRef="4" rule="MISRAC2012-RULE_8_4-a" lnHash="727882071" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="727882071" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1923244810" locEndLn="29" goals="1," />
    <StdViol msg="Prototype of function 'processFile' does not precede function definition" ln="38" locFile="/lib-logic/divisionByZero.c" locStartln="38" sev="2" auth="ciuser" locRef="4" rule="MISRAC2012-RULE_8_4-a" lnHash="-1106684675" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1106684675" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1923244810" locEndLn="38" goals="1," />
    <StdViol msg="Provide only one exit point in 'main' function" ln="51" locFile="/lib-logic/divisionByZero.c" locStartln="51" sev="4" auth="ciuser" locRef="4" rule="MISRAC2012-RULE_15_5-a" lnHash="1941627674" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="1941627674" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="1923244810" locEndLn="51" goals="1," />
    <StdViol msg="Provide only one exit point in 'main' function" ln="56" locFile="/lib-logic/divisionByZero.c" locStartln="56" sev="4" auth="ciuser" locRef="4" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="1923244810" locEndLn="56" goals="1," />
    <StdViol msg="Prototype of function 'printFile' does not precede function definition" ln="10" locFile="/lib-logic/fileLeaks.c" locStartln="10" sev="2" auth="ciuser" locRef="5" rule="MISRAC2012-RULE_8_4-a" lnHash="-923753648" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-923753648" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="-985481290" locEndLn="10" goals="1," />
    <StdViol msg="Prototype of function 'displayFileContent' does not precede function definition" ln="24" locFile="/lib-logic/fileLeaks.c" locStartln="24" sev="2" auth="ciuser" locRef="5" rule="MISRAC2012-RULE_8_4-a" lnHash="460532493" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="460532493" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-985481290" locEndLn="24" goals="1," />
    <StdViol msg="Provide only one exit point in 'displayFileContent' function" ln="30" locFile="/lib-logic/fileLeaks.c" locStartln="30" sev="4" auth="ciuser" locRef="5" rule="MISRAC2012-RULE_15_5-a" lnHash="1941627674" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="1941627674" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="-985481290" locEndLn="30" goals="1," />
    <StdViol msg="Provide only one exit point in 'displayFileContent' function" ln="36" locFile="/lib-logic/fileLeaks.c" locStartln="36" sev="4" auth="ciuser" locRef="5" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-985481290" locEndLn="36" goals="1," />
    <StdViol msg="Prototype of function 'displayContentOfSeveralFiles' does not precede function definition" ln="39" locFile="/lib-logic/fileLeaks.c" locStartln="39" sev="2" auth="ciuser" locRef="5" rule="MISRAC2012-RULE_8_4-a" lnHash="820955547" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="820955547" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-985481290" locEndLn="39" goals="1," />
    <StdViol msg="Provide only one exit point in 'displayContentOfSeveralFiles' function" ln="53" locFile="/lib-logic/fileLeaks.c" locStartln="53" sev="4" auth="ciuser" locRef="5" rule="MISRAC2012-RULE_15_5-a" lnHash="1117575962" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="1117575962" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="13" locType="sr" urgent="true" hash="-985481290" locEndLn="53" goals="1," />
    <StdViol msg="Provide only one exit point in 'displayContentOfSeveralFiles' function" ln="59" locFile="/lib-logic/fileLeaks.c" locStartln="59" sev="4" auth="ciuser" locRef="5" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-985481290" locEndLn="59" goals="1," />
    <StdViol msg="Declaration of object 'buffer_c' does not precede its definition" ln="8" locFile="/lib-logic/integerOverflow.c" locStartln="8" sev="2" auth="ciuser" locRef="6" rule="MISRAC2012-RULE_8_4-a" lnHash="864482513" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="864482513" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="-480973676" locEndLn="8" goals="1," />
    <StdViol msg="Prototype of function 'decode' does not precede function definition" ln="10" locFile="/lib-logic/integerOverflow.c" locStartln="10" sev="2" auth="ciuser" locRef="6" rule="MISRAC2012-RULE_8_4-a" lnHash="-754790912" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-754790912" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="-480973676" locEndLn="10" goals="1," />
    <StdViol msg="Prototype of function 'readMessage' does not precede function definition" ln="16" locFile="/lib-logic/integerOverflow.c" locStartln="16" sev="2" auth="ciuser" locRef="6" rule="MISRAC2012-RULE_8_4-a" lnHash="-1484703711" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1484703711" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" urgent="true" hash="-480973676" locEndLn="16" goals="1," />
    <StdViol msg="The operand of the logical negation operator '!' should have essentially Boolean type" ln="30" locFile="/lib-logic/integerOverflow.c" locStartln="30" sev="2" auth="ciuser" locRef="6" rule="MISRAC2012-RULE_10_1-a" lnHash="37614934" rule.header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" tool="c++test" lineHash="37614934" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="-480973676" locEndLn="30" goals="1," />
    <StdViol msg="Provide only one exit point in 'readMessage' function" ln="31" locFile="/lib-logic/integerOverflow.c" locStartln="31" sev="4" auth="ciuser" locRef="6" rule="MISRAC2012-RULE_15_5-a" lnHash="-1688062501" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1688062501" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" urgent="true" hash="-480973676" locEndLn="31" goals="1," />
    <StdViol msg="Provide only one exit point in 'readMessage' function" ln="41" locFile="/lib-logic/integerOverflow.c" locStartln="41" sev="4" auth="ciuser" locRef="6" rule="MISRAC2012-RULE_15_5-a" lnHash="-382891487" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-382891487" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="2" locType="sr" urgent="true" hash="-480973676" locEndLn="41" goals="1," />
    <StdViol msg="Prototype of function 'storePerson' does not precede function definition" ln="5" locFile="/lib-logic/memoryLeaks.c" locStartln="5" sev="2" auth="ciuser" locRef="7" rule="MISRAC2012-RULE_8_4-a" lnHash="658091286" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="658091286" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1502549011" locEndLn="5" goals="1," />
    <StdViol msg="Prototype of function 'printPersonInfo' does not precede function definition" ln="10" locFile="/lib-logic/memoryLeaks.c" locStartln="10" sev="2" auth="ciuser" locRef="7" rule="MISRAC2012-RULE_8_4-a" lnHash="-1442826185" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1442826185" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1502549011" locEndLn="10" goals="1," />
    <StdViol msg="Function 'exit' should be called at the end of the 'printPersonInfo' function" ln="19" locFile="/lib-logic/memoryLeaks.c" locStartln="19" sev="4" auth="ciuser" locRef="7" rule="MISRAC2012-RULE_15_5-a" lnHash="-812912267" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-812912267" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="25" locType="sr" urgent="true" hash="1502549011" locEndLn="19" goals="1," />
    <StdViol msg="Prototype of function 'simpleLeakInCycle' does not precede function definition" ln="32" locFile="/lib-logic/memoryLeaks.c" locStartln="32" sev="2" auth="ciuser" locRef="7" rule="MISRAC2012-RULE_8_4-a" lnHash="1704975937" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1704975937" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="1502549011" locEndLn="32" goals="1," />
    <StdViol msg="Prototype of function 'storePersonToFile' does not precede function definition" ln="10" locFile="/lib-logic/nullPointerDeref.c" locStartln="10" sev="2" auth="ciuser" locRef="8" rule="MISRAC2012-RULE_8_4-a" lnHash="801076108" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="801076108" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="585379582" locEndLn="10" goals="1," />
    <StdViol msg="Prototype of function 'copyPersonToFile' does not precede function definition" ln="20" locFile="/lib-logic/nullPointerDeref.c" locStartln="20" sev="2" auth="ciuser" locRef="8" rule="MISRAC2012-RULE_8_4-a" lnHash="331968032" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="331968032" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="585379582" locEndLn="20" goals="1," />
    <StdViol msg="Prototype of function 'createPerson' does not precede function definition" ln="27" locFile="/lib-logic/nullPointerDeref.c" locStartln="27" sev="2" auth="ciuser" locRef="8" rule="MISRAC2012-RULE_8_4-a" lnHash="1311475257" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1311475257" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="585379582" locEndLn="27" goals="1," />
    <StdViol msg="Prototype of function 'init' does not precede function definition" ln="36" locFile="/lib-logic/nullPointerDeref.c" locStartln="36" sev="2" auth="ciuser" locRef="8" rule="MISRAC2012-RULE_8_4-a" lnHash="1199394333" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1199394333" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" urgent="true" hash="585379582" locEndLn="36" goals="1," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="7" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="7" sev="2" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_14_4-a" lnHash="1669491884" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="1669491884" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-1583021683" locEndLn="7" goals="1," />
    <StdViol msg="Provide only one exit point in 'helper1' function" ln="8" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="8" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="1941627643" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="1941627643" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="-1583021683" locEndLn="8" goals="1," />
    <StdViol msg="Provide only one exit point in 'helper1' function" ln="9" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="9" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="-293575299" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-293575299" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-1583021683" locEndLn="9" goals="1," />
    <StdViol msg="Provide only one exit point in 'noFalseViolation1' function" ln="21" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="21" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="60910973" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="60910973" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="-1583021683" locEndLn="21" goals="1," />
    <StdViol msg="Provide only one exit point in 'noFalseViolation1' function" ln="22" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="22" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-1583021683" locEndLn="22" goals="1," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="27" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="27" sev="2" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_14_4-a" lnHash="1669491884" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="1669491884" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" urgent="true" hash="-1583021683" locEndLn="27" goals="1," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="29" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="29" sev="2" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_14_4-a" lnHash="1669491884" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="1669491884" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="-1583021683" locEndLn="29" goals="0," />
    <StdViol msg="Provide only one exit point in 'noFalseViolation2' function" ln="30" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="30" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="60910973" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="60910973" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" hash="-1583021683" locEndLn="30" goals="0," />
    <StdViol msg="Provide only one exit point in 'noFalseViolation2' function" ln="31" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="31" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="-1256396037" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1256396037" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="-1583021683" locEndLn="31" goals="0," />
    <StdViol msg="Provide only one exit point in 'noFalseViolation3' function" ln="39" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="39" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="-1025324299" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1025324299" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" hash="-1583021683" locEndLn="39" goals="0," />
    <StdViol msg="Provide only one exit point in 'noFalseViolation3' function" ln="41" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="41" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="1941627643" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="1941627643" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" hash="-1583021683" locEndLn="41" goals="0," />
    <StdViol msg="Provide only one exit point in 'trueViolation' function" ln="49" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="49" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="-1025324299" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="-1025324299" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" hash="-1583021683" locEndLn="49" goals="0," />
    <StdViol msg="Provide only one exit point in 'trueViolation' function" ln="51" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="51" sev="4" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_15_5-a" lnHash="60910973" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="60910973" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" hash="-1583021683" locEndLn="51" goals="0," />
    <StdViol msg="The operand of the logical negation operator '!' should have essentially Boolean type" ln="56" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="56" sev="2" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_10_1-a" lnHash="214580195" rule.header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" tool="c++test" lineHash="214580195" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" urgent="true" hash="-1583021683" locEndLn="56" goals="1," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="70" locFile="/lib-logic/nullPointerDerefBenchmark.c" locStartln="70" sev="2" auth="ciuser" locRef="9" rule="MISRAC2012-RULE_14_4-a" lnHash="1669491884" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="1669491884" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="5" locType="sr" hash="-1583021683" locEndLn="70" goals="0," />
    <StdViol msg="Declaration of object 'requestBeginning' does not precede its definition" ln="8" locFile="/lib-logic/sqlInjection.c" locStartln="8" sev="2" auth="ciuser" locRef="11" rule="MISRAC2012-RULE_8_4-a" lnHash="-559418447" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-559418447" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="13" locType="sr" hash="-1138451494" locEndLn="8" goals="0," />
    <StdViol msg="Declaration of object 'requestPassword' does not precede its definition" ln="9" locFile="/lib-logic/sqlInjection.c" locStartln="9" sev="2" auth="ciuser" locRef="11" rule="MISRAC2012-RULE_8_4-a" lnHash="973978042" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="973978042" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="13" locType="sr" hash="-1138451494" locEndLn="9" goals="0," />
    <StdViol msg="Declaration of object 'requestEnding' does not precede its definition" ln="10" locFile="/lib-logic/sqlInjection.c" locStartln="10" sev="2" auth="ciuser" locRef="11" rule="MISRAC2012-RULE_8_4-a" lnHash="-1884737516" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1884737516" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="13" locType="sr" hash="-1138451494" locEndLn="10" goals="0," />
    <StdViol msg="Prototype of function 'extractUsername' does not precede function definition" ln="12" locFile="/lib-logic/sqlInjection.c" locStartln="12" sev="2" auth="ciuser" locRef="11" rule="MISRAC2012-RULE_8_4-a" lnHash="-1702657345" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1702657345" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" hash="-1138451494" locEndLn="12" goals="0," />
    <StdViol msg="Prototype of function 'extractPassword' does not precede function definition" ln="18" locFile="/lib-logic/sqlInjection.c" locStartln="18" sev="2" auth="ciuser" locRef="11" rule="MISRAC2012-RULE_8_4-a" lnHash="-1186038118" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1186038118" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" hash="-1138451494" locEndLn="18" goals="0," />
    <StdViol msg="Prototype of function 'handleRequest' does not precede function definition" ln="24" locFile="/lib-logic/sqlInjection.c" locStartln="24" sev="2" auth="ciuser" locRef="11" rule="MISRAC2012-RULE_8_4-a" lnHash="-1127426835" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="-1127426835" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" hash="-1138451494" locEndLn="24" goals="0," />
    <StdViol msg="The left hand operand of the logical operator '&amp;&amp;' should have essentially Boolean type" ln="14" locFile="/lib-logic/unreachableCode.c" locStartln="14" sev="2" auth="ciuser" locRef="12" rule="MISRAC2012-RULE_10_1-a" lnHash="698448873" rule.header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" tool="c++test" lineHash="698448873" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" hash="1398926183" locEndLn="14" goals="0," />
    <StdViol msg="The right hand operand of the logical operator '&amp;&amp;' should have essentially Boolean type" ln="14" locFile="/lib-logic/unreachableCode.c" locStartln="14" sev="2" auth="ciuser" locRef="12" rule="MISRAC2012-RULE_10_1-a" lnHash="698448873" rule.header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" tool="c++test" lineHash="698448873" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="9" locType="sr" hash="1398926183" locEndLn="14" goals="0," />
    <StdViol msg="The left hand operand of the logical operator '&amp;&amp;' should have essentially Boolean type" ln="16" locFile="/lib-logic/unreachableCode.c" locStartln="16" sev="2" auth="ciuser" locRef="12" rule="MISRAC2012-RULE_10_1-a" lnHash="-187791626" rule.header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" tool="c++test" lineHash="-187791626" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="16" locType="sr" hash="1398926183" locEndLn="16" goals="0," />
    <StdViol msg="The operand of the logical negation operator '!' should have essentially Boolean type" ln="16" locFile="/lib-logic/unreachableCode.c" locStartln="16" sev="2" auth="ciuser" locRef="12" rule="MISRAC2012-RULE_10_1-a" lnHash="-187791626" rule.header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" tool="c++test" lineHash="-187791626" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="25" locType="sr" hash="1398926183" locEndLn="16" goals="0," />
    <StdViol msg="The operand of the logical negation operator '!' should have essentially Boolean type" ln="18" locFile="/lib-logic/unreachableCode.c" locStartln="18" sev="2" auth="ciuser" locRef="12" rule="MISRAC2012-RULE_10_1-a" lnHash="-1388792196" rule.header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" tool="c++test" lineHash="-1388792196" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="16" locType="sr" hash="1398926183" locEndLn="18" goals="0," />
    <StdViol msg="The right hand operand of the logical operator '&amp;&amp;' should have essentially Boolean type" ln="18" locFile="/lib-logic/unreachableCode.c" locStartln="18" sev="2" auth="ciuser" locRef="12" rule="MISRAC2012-RULE_10_1-a" lnHash="-1388792196" rule.header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" tool="c++test" lineHash="-1388792196" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="16" locType="sr" hash="1398926183" locEndLn="18" goals="0," />
    <StdViol msg="'return' statement should be at the end of the 'checkRange' function" ln="48" locFile="/lib-logic/unreachableCode.c" locStartln="48" sev="4" auth="ciuser" locRef="12" rule="MISRAC2012-RULE_15_5-a" lnHash="516678635" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="516678635" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1398926183" locEndLn="48" goals="0," />
    <StdViol msg="Provide only one exit point in 'checkSequence' function" ln="60" locFile="/lib-logic/unreachableCode.c" locStartln="60" sev="4" auth="ciuser" locRef="12" rule="MISRAC2012-RULE_15_5-a" lnHash="516678635" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="516678635" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1398926183" locEndLn="60" goals="0," />
    <StdViol msg="Provide only one exit point in 'checkSequence' function" ln="65" locFile="/lib-logic/unreachableCode.c" locStartln="65" sev="4" auth="ciuser" locRef="12" rule="MISRAC2012-RULE_15_5-a" lnHash="516678635" rule.header="A function shall have a single point of exit at the end of the function" tool="c++test" lineHash="516678635" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="1398926183" locEndLn="65" goals="0," />
    <StdViol msg="Prototype of function 'DelayResolution100us' does not precede function definition" ln="61" locFile="/build/../../../../../../../app/main.c" locStartln="61" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_8_4-a" lnHash="1903727502" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="1903727502" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" hash="-786036091" locEndLn="61" goals="0," />
    <StdViol msg="Prototype of function 'TimingDelay_Decrement' does not precede function definition" ln="77" locFile="/build/../../../../../../../app/main.c" locStartln="77" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_8_4-a" lnHash="764018318" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="764018318" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="6" locType="sr" hash="-786036091" locEndLn="77" goals="0," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="109" locFile="/build/../../../../../../../app/main.c" locStartln="109" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_14_4-a" lnHash="-1458982084" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="-1458982084" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="3" locType="sr" hash="-786036091" locEndLn="109" goals="0," />
    <StdViol msg="The operand of the '++' operator has essentially enum type: Led_TypeDef" ln="122" locFile="/build/../../../../../../../app/main.c" locStartln="122" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-d" lnHash="-1687095067" rule.header="An operand of essentially enum type should not be used in an arithmetic operation" tool="c++test" lineHash="-1687095067" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="40" locType="sr" hash="-786036091" locEndLn="122" goals="0," />
    <StdViol msg="The left hand operand of the '>>' operator has essentially signed type: int" ln="137" locFile="/build/../../../../../../../app/main.c" locStartln="137" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-e" lnHash="945418054" rule.header="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" tool="c++test" lineHash="945418054" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="17" locType="sr" hash="-786036091" locEndLn="137" goals="0," />
    <StdViol msg="The right hand operand of the '&amp;' operator has essentially signed type: int" ln="137" locFile="/build/../../../../../../../app/main.c" locStartln="137" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-e" lnHash="945418054" rule.header="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" tool="c++test" lineHash="945418054" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="18" locType="sr" hash="-786036091" locEndLn="137" goals="0," />
    <StdViol msg="The left hand operand of the '&lt;&lt;' operator has essentially signed type: signed char" ln="137" locFile="/build/../../../../../../../app/main.c" locStartln="137" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-e" lnHash="945418054" rule.header="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" tool="c++test" lineHash="945418054" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="25" locType="sr" hash="-786036091" locEndLn="137" goals="0," />
    <StdViol msg="The left hand operand of the '&lt;&lt;' operator has essentially signed type: signed char" ln="146" locFile="/build/../../../../../../../app/main.c" locStartln="146" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-e" lnHash="-1440506109" rule.header="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" tool="c++test" lineHash="-1440506109" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="20" locType="sr" hash="-786036091" locEndLn="146" goals="0," />
    <StdViol msg="The right hand operand of the shift operator '&lt;&lt;' has essentially signed type 'int'" ln="146" locFile="/build/../../../../../../../app/main.c" locStartln="146" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-f" lnHash="-1440506109" rule.header="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" tool="c++test" lineHash="-1440506109" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="20" locType="sr" hash="-786036091" locEndLn="146" goals="0," />
    <StdViol msg="The first operand of the conditional operator '?:' should have essentially Boolean type" ln="149" locFile="/build/../../../../../../../app/main.c" locStartln="149" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-a" lnHash="765821995" rule.header="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" tool="c++test" lineHash="765821995" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="20" locType="sr" hash="-786036091" locEndLn="149" goals="0," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="149" locFile="/build/../../../../../../../app/main.c" locStartln="149" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_14_4-a" lnHash="765821995" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="765821995" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="20" locType="sr" hash="-786036091" locEndLn="149" goals="0," />
    <StdViol msg="The right hand operand of the '&amp;' operator has essentially signed type: signed char" ln="149" locFile="/build/../../../../../../../app/main.c" locStartln="149" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-e" lnHash="765821995" rule.header="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" tool="c++test" lineHash="765821995" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="21" locType="sr" hash="-786036091" locEndLn="149" goals="0," />
    <StdViol msg="The operand of the '++' operator has essentially enum type: Led_TypeDef" ln="169" locFile="/build/../../../../../../../app/main.c" locStartln="169" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-d" lnHash="1679064013" rule.header="An operand of essentially enum type should not be used in an arithmetic operation" tool="c++test" lineHash="1679064013" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="42" locType="sr" hash="-786036091" locEndLn="169" goals="0," />
    <StdViol msg="Test of a value against zero should be made explicit" ln="171" locFile="/build/../../../../../../../app/main.c" locStartln="171" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_14_4-a" lnHash="2044605451" rule.header="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" tool="c++test" lineHash="2044605451" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="7" locType="sr" hash="-786036091" locEndLn="171" goals="0," />
    <StdViol msg="The right hand operand of the '&amp;' operator has essentially signed type: int" ln="171" locFile="/build/../../../../../../../app/main.c" locStartln="171" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-e" lnHash="2044605451" rule.header="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" tool="c++test" lineHash="2044605451" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="11" locType="sr" hash="-786036091" locEndLn="171" goals="0," />
    <StdViol msg="The right hand operand of the '&lt;&lt;' operator has essentially enum type: Led_TypeDef" ln="171" locFile="/build/../../../../../../../app/main.c" locStartln="171" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-d" lnHash="2044605451" rule.header="An operand of essentially enum type should not be used in an arithmetic operation" tool="c++test" lineHash="2044605451" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="23" locType="sr" hash="-786036091" locEndLn="171" goals="0," />
    <StdViol msg="The left hand operand of the '&lt;&lt;' operator has essentially signed type: signed char" ln="171" locFile="/build/../../../../../../../app/main.c" locStartln="171" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-e" lnHash="2044605451" rule.header="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" tool="c++test" lineHash="2044605451" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="23" locType="sr" hash="-786036091" locEndLn="171" goals="0," />
    <StdViol msg="The right hand operand of the shift operator '&lt;&lt;' has essentially enum type 'Led_TypeDef'" ln="171" locFile="/build/../../../../../../../app/main.c" locStartln="171" sev="2" auth="ciuser" locRef="13" rule="MISRAC2012-RULE_10_1-f" lnHash="2044605451" rule.header="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" tool="c++test" lineHash="2044605451" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="23" locType="sr" hash="-786036091" locEndLn="171" goals="0," />
    <StdViol msg="Prototype of function 'recv' does not precede function definition" ln="6" locFile="/lib-logic/socket.h" locStartln="6" sev="2" auth="ciuser" locRef="16" rule="MISRAC2012-RULE_8_4-a" lnHash="38877241" rule.header="A declaration shall be visible when an object or function with external linkage is defined" tool="c++test" lineHash="38877241" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" locEndPos="14" locType="sr" urgent="true" hash="-829573575" locEndLn="6" goals="1," />
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="91">
            <Project id="lib-logic" name="lib-logic" supp="0" total="73">
               <Res loc="/lib-logic/arrayOutOfBounds.c" locRef="1" locType="sr" name="arrayOutOfBounds.c" supp="0" total="5" />
               <Res loc="/lib-logic/bufferOverflow.c" locRef="2" locType="sr" name="bufferOverflow.c" supp="0" total="4" />
               <Res loc="/lib-logic/dbutil.c" locRef="3" locType="sr" name="dbutil.c" supp="0" total="3" />
               <Res loc="/lib-logic/divisionByZero.c" locRef="4" locType="sr" name="divisionByZero.c" supp="0" total="9" />
               <Res loc="/lib-logic/fileLeaks.c" locRef="5" locType="sr" name="fileLeaks.c" supp="0" total="7" />
               <Res loc="/lib-logic/integerOverflow.c" locRef="6" locType="sr" name="integerOverflow.c" supp="0" total="6" />
               <Res loc="/lib-logic/memoryLeaks.c" locRef="7" locType="sr" name="memoryLeaks.c" supp="0" total="4" />
               <Res loc="/lib-logic/nullPointerDeref.c" locRef="8" locType="sr" name="nullPointerDeref.c" supp="0" total="4" />
               <Res loc="/lib-logic/nullPointerDerefBenchmark.c" locRef="9" locType="sr" name="nullPointerDerefBenchmark.c" supp="0" total="15" />
               <Res loc="/lib-logic/sql.c" locRef="10" locType="sr" name="sql.c" supp="0" total="0" />
               <Res loc="/lib-logic/sqlInjection.c" locRef="11" locType="sr" name="sqlInjection.c" supp="0" total="6" />
               <Res loc="/lib-logic/unreachableCode.c" locRef="12" locType="sr" name="unreachableCode.c" supp="0" total="9" />
               <Res loc="/lib-logic/dbutil.h" locRef="15" locType="sr" name="dbutil.h" supp="0" total="0" />
               <Res loc="/lib-logic/socket.h" locRef="16" locType="sr" name="socket.h" supp="0" total="1" />
               <Res loc="/lib-logic/sql.h" locRef="17" locType="sr" name="sql.h" supp="0" total="0" />
            </Project>
            <Project id="build" name="build" supp="0" total="18">
               <Res name=".." supp="0" total="18">
                  <Res name=".." supp="0" total="18">
                     <Res name=".." supp="0" total="18">
                        <Res name=".." supp="0" total="18">
                           <Res name=".." supp="0" total="18">
                              <Res name=".." supp="0" total="18">
                                 <Res name=".." supp="0" total="18">
                                    <Res name="app" supp="0" total="18">
                                       <Res loc="/build/../../../../../../../app/main.c" locRef="13" locType="sr" name="main.c" supp="0" total="18" />
                                       <Res loc="/build/../../../../../../../app/stm32f4xx_it.c" locRef="14" locType="sr" name="stm32f4xx_it.c" supp="0" total="0" />
                                    </Res>
                                 </Res>
                              </Res>
                           </Res>
                        </Res>
                     </Res>
                  </Res>
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
